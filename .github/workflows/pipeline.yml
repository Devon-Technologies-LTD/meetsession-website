name: MeetSession Frontend Pipeline

on:
    push:
        branches: 
            - "preprod"   # Preproduction
            - "stage"         # Staging
            
    pull_request:
        types: 
            - closed
        branches: 
            - "production"      # Production

jobs:
    staging-deploy:
      name: Deploy changes to staging server
      runs-on: ubuntu-latest
      if: ${{ github.ref == 'refs/heads/stage' }}

      steps:
        # 1. Checkout repository
        - name: Check out repository
          uses: actions/checkout@v4

        # 2. Set up Node.js (for lint + type-check + tests)
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 24

        # 3. Log in to GitHub Container Registry
        - name: Log in to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GHCR_PAT != '' && secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

        # 4. Build and push Docker image
        - name: Build and push Docker image
          run: |
            IMAGE_NAME=$(echo "ghcr.io/${{ github.actor }}/meetsession/frontend" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG=prod-${{ github.sha }}
            IMAGE_ENV=staging

            echo "Building image $IMAGE_NAME:$IMAGE_TAG"
            docker build -t $IMAGE_NAME:$IMAGE_TAG -f docker/$IMAGE_ENV/Dockerfile .
            docker push $IMAGE_NAME:$IMAGE_TAG

            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
            echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
            # echo "IMAGE_ENV=$IMAGE_ENV" >> $GITHUB_ENV

        # 5. Deploy on VPS
        - name: Deploy via SSH and Docker Compose
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.MS_STAGING_HOST }}
            username: ${{ secrets.MS_STAGING_USER }}
            password: ${{ secrets.MS_STAGING_PASS }}
            port: ${{ secrets.PORT }}
            script: |
              set -e
              APP_DIR="/opt/products/meetsession/fe-staging"
              IMAGE_NAME=${{ env.IMAGE_NAME }}
              IMAGE_TAG=${{ env.IMAGE_TAG }}
              GHCR_PAT=${{ env.GHCR_PAT }}

              mkdir -p $APP_DIR
              cd $APP_DIR

              # Create/update compose.yml if needed
              if [ -f compose.yml ]; then
                echo "Updating compose file..."
              else
                echo "Creating compose file..."
              fi
              cat > compose.yml <<EOF
              services:
                web:
                  build:
                    platforms:
                      - linux/amd64
                      - linux/arm64
                  image: $IMAGE_NAME:$IMAGE_TAG
                  ports:
                    - "3012:3000"
                  restart: unless-stopped
                  env_file:
                    - .env
              EOF

              # Pull new image and start container
              echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
              docker compose pull
              docker compose -f compose.yml up -d

    preproduction-deploy:
      name: Deploy changes to preproduction server
      runs-on: ubuntu-latest
      if: ${{ github.ref == 'refs/heads/preproduction' }}

      steps:
        # 1. Checkout repository
        - name: Check out repository
          uses: actions/checkout@v4

        # 2. Set up Node.js (for lint + type-check + tests)
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 24

        # 3. Log in to GitHub Container Registry
        - name: Log in to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GHCR_PAT != '' && secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

        # 4. Build and push Docker image
        - name: Build and push Docker image
          run: |
            IMAGE_NAME=$(echo "ghcr.io/${{ github.actor }}/meetsession/frontend" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG=prod-${{ github.sha }}
            IMAGE_ENV=preproduction

            echo "Building image $IMAGE_NAME:$IMAGE_TAG"
            docker build -t $IMAGE_NAME:$IMAGE_TAG -f docker/$IMAGE_ENV/Dockerfile .
            docker push $IMAGE_NAME:$IMAGE_TAG

            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
            echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
            # echo "IMAGE_ENV=$IMAGE_ENV" >> $GITHUB_ENV

        # 5. Deploy on VPS
        - name: Deploy via SSH and Docker Compose
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.MS_PREPROD_HOST }}
            username: ${{ secrets.MS_PREPROD_USER }}
            password: ${{ secrets.MS_PREPROD_PASS }}
            port: ${{ secrets.PORT }}
            script: |
              set -e
              APP_DIR="/opt/products/meetsession/fe-preproduction"
              IMAGE_NAME=${{ env.IMAGE_NAME }}
              IMAGE_TAG=${{ env.IMAGE_TAG }}
              GHCR_PAT=${{ env.GHCR_PAT }}

              mkdir -p $APP_DIR
              cd $APP_DIR

              # Create/update compose.yml if needed
              if [ -f compose.yml ]; then
                echo "Updating compose file..."
              else
                echo "Creating compose file..."
              fi
              cat > compose.yml <<EOF
              services:
                web:
                  build:
                    platforms:
                      - linux/amd64
                      - linux/arm64
                  image: $IMAGE_NAME:$IMAGE_TAG
                  ports:
                    - "3012:3000"
                  restart: unless-stopped
                  env_file:
                    - .env
              EOF

              # Pull new image and start container
              echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
              docker compose pull
              docker compose -f compose.yml up -d

    production-deploy:
      name: Deploy changes to production server
      runs-on: ubuntu-latest
      if: ${{ github.ref == 'refs/heads/production' }}

      steps:
        # 1. Checkout repository
        - name: Check out repository
          uses: actions/checkout@v4

        # 2. Set up Node.js (for lint + type-check + tests)
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 24

        # 3. Log in to GitHub Container Registry
        - name: Log in to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GHCR_PAT != '' && secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

        # 4. Build and push Docker image
        - name: Build and push Docker image
          run: |
            IMAGE_NAME=$(echo "ghcr.io/${{ github.actor }}/meetsession/frontend" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG=prod-${{ github.sha }}
            IMAGE_ENV=production

            echo "Building image $IMAGE_NAME:$IMAGE_TAG"
            docker build -t $IMAGE_NAME:$IMAGE_TAG -f docker/$IMAGE_ENV/Dockerfile .
            docker push $IMAGE_NAME:$IMAGE_TAG

            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
            echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
            # echo "IMAGE_ENV=$IMAGE_ENV" >> $GITHUB_ENV

        # 5. Deploy on VPS
        - name: Deploy via SSH and Docker Compose
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.MS_PROD_HOST }}
            username: ${{ secrets.MS_PROD_USER }}
            password: ${{ secrets.MS_PROD_PASS }}
            port: ${{ secrets.PORT }}
            script: |
              set -e
              APP_DIR="/mnt/production_volume/products/MeetSession-frontend"
              IMAGE_NAME=${{ env.IMAGE_NAME }}
              IMAGE_TAG=${{ env.IMAGE_TAG }}
              GHCR_PAT=${{ env.GHCR_PAT }}

              mkdir -p $APP_DIR
              cd $APP_DIR

              # Create/update compose.yml if needed
              if [ -f compose.yml ]; then
                echo "Updating compose file..."
              else
                echo "Creating compose file..."
              fi
              echo '${{ secrets.MS_PROD_PASS }}' sudo -S cat > compose.yml <<EOF
              services:
                web:
                  build:
                    platforms:
                      - linux/amd64
                      - linux/arm64
                  image: $IMAGE_NAME:$IMAGE_TAG
                  ports:
                    - "3123:3000"
                  restart: unless-stopped
                  env_file:
                    - .env
              EOF

              # Pull new image and start container
              echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
              docker compose pull
              docker compose -f compose.yml up -d
